//Question 1 :

class Tache {
	private int temps_necessaire;
	private int gain;
	
	public Tache(int temps_necessaire, int gain)
	//@requires temps_necessaire >= 0;
	//@ensures this.temps_necessaire |-> temps_necessaire &*& this.gain |-> gain;
	{
		this.temps_necessaire = temps_necessaire;
		this.gain = gain;
	}
	
	public int get_temps_necessaire()
	//@requires this.temps_necessaire |-> ?b;
	//@ensures this.temps_necessaire |-> b &*& result == b;
	{
		return this.temps_necessaire;
	}
	
	public int get_gain()
	//@requires this.gain |-> ?b;
	//@ensures this.gain |-> b &*& result == b;
	{
		return this.gain;
	}
}

//Question 2 :

//@predicate tache(Tache tache; int tn, int g) = tache.temps_necessaire |-> tn &*& tache.gain |-> g &*& tn >= 0 &*& g >= 0;
class Tache {
	private int temps_necessaire;
	private int gain;
	
	public Tache(int temps_necessaire, int gain)
	//@requires temps_necessaire >= 0 && gain >= 0;
	//@ensures tache(this, temps_necessaire, gain);
	{
		this.temps_necessaire = temps_necessaire;
		this.gain = gain;
	}
	
	public int get_temps_necessaire()
	//@requires tache(this, ?tn, _);
	//@ensures tache(this, tn, _) &*& result == tn;
	{
		return this.temps_necessaire;
	}
	
	public int get_gain()
	//@requires tache(this, _, ?g);
	//@ensures tache(this, _, g) &*& result == g;
	{
		return this.gain;
	}
}

//Question 4 : (question 3 trivialle)

/*@predicate travailleur(Travailleur travailleur; int temps_dispo, int salaire_horaire, int salaire_percu) = 
	travailleur.temps_dispo |-> temps_dispo &*&
	travailleur.salaire_horaire |-> salaire_horaire &*&
	travailleur.salaire_percu |-> salaire_percu;
@*/
class Travailleur {
	private int temps_dispo;
	private int salaire_horaire;
	private int salaire_percu;
	
	public Travailleur(int temps_dispo, int salaire_horaire)
	//@requires salaire_horaire >= 0;
	//@ensures travailleur(this, temps_dispo, salaire_horaire, 0);
	{
		this.temps_dispo = temps_dispo;
		this.salaire_horaire = salaire_horaire;
		this.salaire_percu = 0;
	}
	
	public int get_temps_dispo()
	//@requires travailleur(this, ?td, _, _);
	//@ensures travailleur(this, td, _, _) &*& result == td;
	{
		return this.temps_dispo;
	}
	
	public int get_salaire_horaire()
	//@requires travailleur(this, _, ?sh, _);
	//@ensures travailleur(this, _, sh, _) &*& result == sh;
	{
		return this.salaire_horaire;
	}
	
	public int get_salaire_percu()
	//@requires travailleur(this, _, _, ?sp);
	//@ensures travailleur(this, _, _, sp) &*& result == sp;
	{
		return this.salaire_percu;
	}
}

//Question 5 et 6 : 
	
	public int travailler(int t)
	//@requires travailleur(this, _, ?sh, ?sp) &*& t >= 0;
	//@ensures travailleur(this, _, sh, sp+sh*t);
	{
		this.salaire_percu += this.salaire_horaire*t;
		return this.salaire_horaire*t;
	}



//Question 7 et 8 :

/*@predicate usine(Usine usine; int balance) = usine.balance |-> balance;
@*/
class Usine {
    private int balance;
    
    public Usine(int depot_initial)
    //@requires depot_initial >= 0;
    //@ensures usine(this, depot_initial);
    {
        this.balance = depot_initial;
    }
    
    public int get_balance()
    //@requires usine(this, ?di);
    //@ensures usine(this, di) &*& result == di;
    {
        return this.balance;
    }
    
    public void depose_argent(int argent)
    //@requires usine(this, ?di);
    //@ensures usine(this, di+argent);
    {
        this.balance += argent;
    }

}

//Question 9 

On rajoute ça dans travailleur : 

public void setTempsDispo(int t)
	//@requires travailleur(this, ?td, ?sh, ?sp);
	//@ensures travailleur(this, t, sh, sp);
	{
		this.temps_dispo = t;
	}


Et ça dans usine :

public boolean effectueTache(Tache tache, Travailleur travailleur)
    //@requires tache(tache, ?n, ?g) &*& travailleur(travailleur, ?td, ?sh, ?sp) &*& usine(this, ?di);
    //@ensures true;
    {   
    	//@open tache(tache, n, g);
    	//@open travailleur(travailleur, td, sh, sp); 
        int temps_dispo = travailleur.get_temps_dispo();
        int temps_nece = tache.get_temps_necessaire();
        
        if(temps_dispo-temps_nece >=0) //Si il reste suffisamment de temps disponible pour que le travailleur travaille sur sa tache
        {
            depose_argent(tache.get_gain());
            depose_argent(-(travailleur.travailler(tache.get_temps_necessaire())));
            
            travailleur.setTempsDispo(temps_dispo - temps_nece);
            return true;
            
        } else {
            return false;
        }
    }



	  
